import numpy as npfrom sklearn.metrics import mean_squared_errorfrom sklearn import kernel_ridgeimport pandas as pdfrom sklearn.inspection import permutation_importancefrom sklearn.model_selection import train_test_splitpd.options.mode.chained_assignment = Nonedef main():    # read in data    data = pd.read_csv(        '/Users/skylersprecker/Desktop/4033machinelearning/FinalProject/Covid19ResearchStandardizedDataset.csv')    permutation_importance_calculations(data)    # Below method only needed to test different hyperparameter values    # Can stay commented out more of the time    # hyperparameter_tuning(data)# method to perform krr and then use permutation importance to find important variablesdef permutation_importance_calculations(data):    sample = data.iloc[:, 0:-1]  # first p-1 columns are features    label = data.iloc[:, -1]  # last column is label    permutation_importance_values = {}    first_time_through = True    column_names = list(data.columns)    num_iterations = 20    # randomly split data 100 times, performing ridge regression each time    for i in range(num_iterations):        # randomly split training and testing data        sample_train, sample_test, label_train, label_test = train_test_split(sample, label, test_size=0.33)        # perform kernel ridge regression        krr_model = krr_model_creation(sample_train, label_train)        permutation_results = permutation_importance(krr_model, sample_test, label_test, n_repeats=20)        # if columns haven't already been added, add initial values        if first_time_through:            for j in permutation_results.importances_mean.argsort()[::-1]:                permutation_importance_values[column_names[j]] \                    = [permutation_results.importances_mean[j], permutation_results.importances_std[j]]            first_time_through = False        # else add new values        else:            for j in permutation_results.importances_mean.argsort()[::-1]:                permutation_importance_values[column_names[j]][0] += permutation_results.importances_mean[j]                permutation_importance_values[column_names[j]][1] += permutation_results.importances_std[j]    for key, value in permutation_importance_values.items():        # divide each value by 20 to get the average and print        value[0] /= 20        value[1] /= 20        print(f"{key:<8}: " f"{value[0]:.5f}" f" +/- {value[1]:.5f}")# method to calculate kernel ridge regression modeldef krr_model_creation(sample_train, label_train):    # calculate ridge regression with alpha value 0.2 and default (1/13) gamma    model = kernel_ridge.KernelRidge(alpha=0.2, kernel="rbf")    model.fit(sample_train, label_train)    return model# method to make predictions and calculate MSE for krrdef predictions(model, sample_train, sample_test, label_train, label_test):    # make predictions with model    label_pred_train = model.predict(sample_train)    label_pred_test = model.predict(sample_test)    # calculate MSE values    mse_train = mean_squared_error(label_train, label_pred_train)    mse_test = mean_squared_error(label_test, label_pred_test)    # return MSE and coefficient values    return mse_train, mse_test# method to tune the krr hyperparametersdef hyperparameter_tuning(data):    sample = data.iloc[:, 0:-1]  # first p-1 columns are features    label = data.iloc[:, -1]  # last column is label    krr_mse_train_values = []    krr_mse_test_values = []    # randomly split data 20 times, performing ridge regression each time    for i in range(20):        # randomly split training and testing data        sample_train, sample_test, label_train, label_test = train_test_split(sample, label, test_size=0.33)        # perform kernel ridge regression        krr_model = krr_model_creation(sample_train, label_train)        curr_krr_mse_train, curr_krr_mse_test = predictions(krr_model, sample_train, sample_test, label_train,                                                            label_test)        # add mse values to lists        krr_mse_train_values.append(curr_krr_mse_train)        krr_mse_test_values.append(curr_krr_mse_test)    print("{:.8f}".format(np.mean(krr_mse_train_values)))    print("{:.8f}".format(np.mean(krr_mse_test_values)))if __name__ == "__main__":    main()